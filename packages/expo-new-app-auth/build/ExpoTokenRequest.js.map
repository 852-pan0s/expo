{"version":3,"file":"ExpoTokenRequest.js","sourceRoot":"","sources":["../src/ExpoTokenRequest.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,6BAA6B,EAE7B,YAAY,GAEb,MAAM,iBAAiB,CAAC;AACzB,OAAO,SAAS,MAAM,WAAW,CAAC;AAYlC;;;;GAIG;AACH,MAAM,OAAO,gBAAiB,SAAQ,YAAY;IAKhD,YAAY,OAA6B;QACvC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,aAAa,CAAC;QAE1C,8DAA8D;QAC9D,WAAW;QACX,IAAI,OAAO,CAAC,UAAU,KAAK,6BAA6B,EAAE;YACxD,+BAA+B;YAC/B,SAAS,CACP,OAAO,CAAC,YAAY,EACpB,6DAA6D,OAAO,CAAC,UAAU,8EAA8E,CAC9J,CAAC;SACH;IACH,CAAC;IAED,WAAW;QACT,MAAM,GAAG,GAAc;YACrB,UAAU,EAAE,IAAI,CAAC,SAAS;YAC1B,SAAS,EAAE,IAAI,CAAC,QAAQ;YACxB,YAAY,EAAE,IAAI,CAAC,WAAW;SAC/B,CAAC;QAEF,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;SACzB;QAED,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,GAAG,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;SAC1C;QAED,0BAA0B;QAC1B,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,GAAG,CAAC,SAAS,CAAC;SACtB;QAED,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,GAAG,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;SAC1C;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;SAC3B;QAED,mBAAmB;QACnB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;gBAC/B,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,EAAE;oBAC3C,uCAAuC;oBACvC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjC;aACF;SACF;QACD,OAAO,GAAG,CAAC;IACb,CAAC;CACF","sourcesContent":["import {\n  GRANT_TYPE_AUTHORIZATION_CODE,\n  StringMap,\n  TokenRequest,\n  TokenRequestJson,\n} from '@openid/appauth';\nimport invariant from 'invariant';\n\n/**\n * Represents the Token Request as JSON.\n */\nexport interface ExpoTokenRequestJson extends TokenRequestJson {\n  client_secret?: string;\n  scope?: string;\n  code_verifier?: string;\n  grant_type: 'authorization_code' | 'refresh_token';\n}\n\n/**\n * Represents an Access Token request.\n * For more information look at:\n * https://tools.ietf.org/html/rfc6749#section-4.1.3\n */\nexport class ExpoTokenRequest extends TokenRequest {\n  clientSecret?: string;\n  scope?: string;\n  codeVerifier?: string;\n\n  constructor(request: ExpoTokenRequestJson) {\n    super(request);\n    this.clientSecret = request.client_secret;\n    this.scope = request.scope;\n    this.codeVerifier = request.code_verifier;\n\n    // Additional validation for the authorization_code grant type\n    // From iOS\n    if (request.grant_type === GRANT_TYPE_AUTHORIZATION_CODE) {\n      // redirect URI must not be nil\n      invariant(\n        request.redirect_uri,\n        `A \\`ExpoTokenRequest\\` was created with a \\`grant_type\\` (${request.grant_type}) that requires a \\`redirect_uri\\`, but a nullish \\`redirect_uri\\` was given`\n      );\n    }\n  }\n\n  toStringMap(): StringMap {\n    const map: StringMap = {\n      grant_type: this.grantType,\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri,\n    };\n\n    if (this.code) {\n      map['code'] = this.code;\n    }\n\n    if (this.refreshToken) {\n      map['refresh_token'] = this.refreshToken;\n    }\n\n    // Maybe just platform iOS\n    if (this.clientSecret) {\n      delete map.client_id;\n    }\n\n    if (this.codeVerifier) {\n      map['code_verifier'] = this.codeVerifier;\n    }\n\n    if (this.scope) {\n      map['scope'] = this.scope;\n    }\n\n    // copy over extras\n    if (this.extras) {\n      for (const extra in this.extras) {\n        if (extra in this.extras && !(extra in map)) {\n          // check before inserting to requestMap\n          map[extra] = this.extras[extra];\n        }\n      }\n    }\n    return map;\n  }\n}\n"]}