{"version":3,"file":"ExpoTokenRequestHandler.js","sourceRoot":"","sources":["../src/ExpoTokenRequestHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,YAAY,EAEZ,uBAAuB,EACvB,qBAAqB,EAKrB,UAAU,EAGV,aAAa,GAEd,MAAM,iBAAiB,CAAC;AAMzB,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAClD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,uBAAuB;IAClE,YACE,YAAuB,IAAI,aAAa,EAAE,EAC1C,QAA0B,IAAI,qBAAqB,EAAE;QAErD,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,yBAAyB,CAC7B,aAAwF,EACxF,OAA2B;QAE3B,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE;YACrC,MAAM,IAAI,KAAK,CACb,wGAAwG,CACzG,CAAC;SACH;QACD,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAU;YAChC,GAAG,EAAE,aAAa,CAAC,kBAAkB;YACrC,MAAM,EAAE,MAAM;YACd,OAAO,EAAE,EAAE,cAAc,EAAE,mCAAmC,EAAE;YAChE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;SAClD,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,UAAU,CAAC,OAAqB;QACtC,MAAM,OAAO,GAAc,EAAE,cAAc,EAAE,mCAAmC,EAAE,CAAC;QACnF,yFAAyF;QACzF,0EAA0E;QAC1E,IAAI,OAAO,YAAY,gBAAgB,IAAI,OAAO,OAAO,CAAC,YAAY,KAAK,WAAW,EAAE;YACtF,MAAM,eAAe,GAAG,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC7D,MAAM,mBAAmB,GAAG,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACrE,MAAM,WAAW,GAAG,GAAG,eAAe,IAAI,mBAAmB,EAAE,CAAC;YAChE,MAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAClD,OAAO,CAAC,aAAa,GAAG,SAAS,SAAS,EAAE,CAAC;SAC9C;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,aAA4F,EAC5F,OAAqB;QAErB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAqC;YAC5E,GAAG,EAAE,aAAa,CAAC,aAAa;YAChC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,MAAM;YAChB,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YACjC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;SAClD,CAAC,CAAC;QAEH,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;YAC7B,OAAO,IAAI,aAAa,CAAC,QAAQ,CAAC,CAAC;SACpC;QACD,MAAM,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnE,CAAC;CACF;AAED,SAAS,eAAe,CACtB,QAA4C;IAE5C,OAAQ,QAA2B,CAAC,KAAK,KAAK,SAAS,CAAC;AAC1D,CAAC","sourcesContent":["import {\n  AppAuthError,\n  AuthorizationServiceConfiguration,\n  BaseTokenRequestHandler,\n  BasicQueryStringUtils,\n  QueryStringUtils,\n  Requestor,\n  RevokeTokenRequest,\n  StringMap,\n  TokenError,\n  TokenErrorJson,\n  TokenRequest,\n  TokenResponse,\n  TokenResponseJson,\n} from '@openid/appauth';\n\nimport {\n  ExpoAuthorizationServiceConfiguration,\n  ExpoAuthorizationServiceConfigurationJson,\n} from './ExpoAuthorizationServiceConfiguration';\nimport { encodeBase64NoWrap } from './ExpoCrypto';\nimport { ExpoRequestor } from './ExpoRequestor';\nimport { ExpoTokenRequest } from './ExpoTokenRequest';\n\n/**\n * The default token request handler.\n */\nexport class ExpoTokenRequestHandler extends BaseTokenRequestHandler {\n  constructor(\n    requestor: Requestor = new ExpoRequestor(),\n    utils: QueryStringUtils = new BasicQueryStringUtils()\n  ) {\n    super(requestor, utils);\n  }\n\n  async performRevokeTokenRequest(\n    configuration: AuthorizationServiceConfiguration | ExpoAuthorizationServiceConfiguration,\n    request: RevokeTokenRequest\n  ): Promise<boolean> {\n    if (!configuration.revocationEndpoint) {\n      throw new Error(\n        `Cannot revoke token without a valid \\`revocationEndpoint\\` in the authorization service configuration.`\n      );\n    }\n    await this.requestor.xhr<boolean>({\n      url: configuration.revocationEndpoint,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      data: this.utils.stringify(request.toStringMap()),\n    });\n\n    return true;\n  }\n\n  private getHeaders(request: TokenRequest): StringMap {\n    const headers: StringMap = { 'Content-Type': 'application/x-www-form-urlencoded' };\n    // From the OAuth2 RFC, client ID and secret should be encoded prior to concatenation and\n    // conversion to Base64: https://tools.ietf.org/html/rfc6749#section-2.3.1\n    if (request instanceof ExpoTokenRequest && typeof request.clientSecret !== 'undefined') {\n      const encodedClientId = encodeURIComponent(request.clientId);\n      const encodedClientSecret = encodeURIComponent(request.clientSecret);\n      const credentials = `${encodedClientId}:${encodedClientSecret}`;\n      const basicAuth = encodeBase64NoWrap(credentials);\n      headers.Authorization = `Basic ${basicAuth}`;\n    }\n\n    return headers;\n  }\n\n  async performTokenRequest(\n    configuration: AuthorizationServiceConfiguration | ExpoAuthorizationServiceConfigurationJson,\n    request: TokenRequest\n  ): Promise<TokenResponse> {\n    const response = await this.requestor.xhr<TokenResponseJson | TokenErrorJson>({\n      url: configuration.tokenEndpoint,\n      method: 'POST',\n      dataType: 'json', // adding implicit dataType\n      headers: this.getHeaders(request),\n      data: this.utils.stringify(request.toStringMap()),\n    });\n\n    if (isTokenResponse(response)) {\n      return new TokenResponse(response);\n    }\n    throw new AppAuthError(response.error, new TokenError(response));\n  }\n}\n\nfunction isTokenResponse(\n  response: TokenResponseJson | TokenErrorJson\n): response is TokenResponseJson {\n  return (response as TokenErrorJson).error === undefined;\n}\n"]}