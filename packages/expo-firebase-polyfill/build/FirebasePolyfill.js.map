{"version":3,"file":"FirebasePolyfill.js","sourceRoot":"","sources":["../src/FirebasePolyfill.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,UAAU,CAAC;AACtC,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAE3C,kBAAkB;AAClB,aAAa;AACb,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;IAChB,aAAa;IACb,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;CACpB;AAED,kBAAkB;AAClB,aAAa;AACb,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;IAChB,aAAa;IACb,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;CACpB;AAED,oCAAoC;AACpC,aAAa;AACb,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;IACpD,aAAa;IACb,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IACpC,aAAa;IACb,MAAM,CAAC,MAAM,CAAC,eAAe,GAAG,eAAe,CAAC;CACjD;AAED,2EAA2E;AAC3E,wEAAwE;AACxE,+EAA+E;AAC/E,wEAAwE;AACxE,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE;IAC7B,IAAI,OAAO,EAAE;QACX,OAAO,CAAC,IAAI,CACV,uIAAuI,CACxI,CAAC;KACH;IACD,MAAM,kBAAkB,GAAG,MAAM,CAAC,UAAU,CAAC;IAC7C,MAAM,CAAC,UAAU,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE;QACxC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACnC,OAAO,kBAAkB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC,CAAC;CACH","sourcesContent":["import { Platform } from 'react-native';\n\nimport { btoa, atob } from './Base64';\nimport { getRandomValues } from './Crypto';\n\n// Polyfill `btoa`\n// @ts-ignore\nif (!global.btoa) {\n  // @ts-ignore\n  global.btoa = btoa;\n}\n\n// Polyfill `atob`\n// @ts-ignore\nif (!global.atob) {\n  // @ts-ignore\n  global.atob = atob;\n}\n\n// Polyfill `Crypto.getRandomValues`\n// @ts-ignore\nif (!global.crypto || !global.crypto.getRandomValues) {\n  // @ts-ignore\n  global.crypto = global.crypto || {};\n  // @ts-ignore\n  global.crypto.getRandomValues = getRandomValues;\n}\n\n// Firebase schedules timers with excessive timeouts. On Android this leads\n// to unnecessary battery drain by keeping the phone awake. React-native\n// warns for this by throwing the \"Setting a timer for a long period of time..\"\n// warning. To mitigate this problem, all timers are capped to 1 minute.\nif (Platform.OS === 'android') {\n  if (__DEV__) {\n    console.info(\n      `All setTimeout calls are capped to 60000 milliseconds (see https://github.com/expo/expo/tree/master/packages/expo-firebase-polyfill/)`\n    );\n  }\n  const originalSetTimeout = global.setTimeout;\n  global.setTimeout = (callback, timeout) => {\n    timeout = Math.min(60000, timeout);\n    return originalSetTimeout(callback, timeout);\n  };\n}\n"]}