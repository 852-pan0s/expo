{"version":3,"file":"Crypto.js","sourceRoot":"","sources":["../src/Crypto.ts"],"names":[],"mappings":"AASA;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAuB,UAAa;IACjE,IACE,CAAC,CACC,UAAU,YAAY,SAAS;QAC/B,UAAU,YAAY,UAAU;QAChC,UAAU,YAAY,UAAU;QAChC,UAAU,YAAY,WAAW;QACjC,UAAU,YAAY,UAAU;QAChC,UAAU,YAAY,WAAW;QACjC,UAAU,YAAY,iBAAiB,CACxC,EACD;QACA,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KACpD;IAED,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACrD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;KACvD;IACD,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\n/**\n * A simple Crypto.getRandomValues implementation using Math.random().\n * https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\n * @param typedArray\n */\nexport function getRandomValues<T extends TypedArray>(typedArray: T): T {\n  if (\n    !(\n      typedArray instanceof Int8Array ||\n      typedArray instanceof Uint8Array ||\n      typedArray instanceof Int16Array ||\n      typedArray instanceof Uint16Array ||\n      typedArray instanceof Int32Array ||\n      typedArray instanceof Uint32Array ||\n      typedArray instanceof Uint8ClampedArray\n    )\n  ) {\n    throw new Error('Expected an integer typed-array');\n  }\n\n  const writeArray = new Uint8Array(typedArray.buffer);\n  for (let i = 0; i < writeArray.length; i++) {\n    writeArray[i] = Math.floor(Math.random() * 256) % 256;\n  }\n  return typedArray;\n}\n"]}