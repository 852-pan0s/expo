{"version":3,"file":"ExpoAuthorizationRequest.js","sourceRoot":"","sources":["../src/ExpoAuthorizationRequest.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAA+C,MAAM,iBAAiB,CAAC;AACpG,OAAO,SAAS,MAAM,WAAW,CAAC;AAClC,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAc1C,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,uBAAuB;AAExC,MAAM,gBAAgB,GAAG,MAAM,CAAC;AAEhC;;;;GAIG;AACH,MAAM,OAAO,wBAAyB,SAAQ,oBAAoB;IAQhE;;;;OAIG;IACH,YACE,OAAqC;IACrC,0CAA0C;IAC1C,UAAkB,IAAI,UAAU,EAAE,EAClC,WAAoB,IAAI;QAExB,SAAS,CACP,OAAO,CAAC,YAAY,EACpB,iEAAiE,CAClE,CAAC;QACF,SAAS,CACP,OAAO,CAAC,WAAW,EACnB,2EAA2E,QAAQ,CAAC,MAAM,CAAC;YACzF,GAAG,EAAE,0BAA0B;YAC/B,OAAO,EAAE,6BAA6B;SACvC,CAAC,EAAE,CACL,CAAC;QACF,KAAK,CACH;YACE,aAAa,EAAE,OAAO,CAAC,YAAa;YACpC,SAAS,EAAE,OAAO,CAAC,QAAQ;YAC3B,YAAY,EAAE,OAAO,CAAC,WAAW;YACjC,KAAK,EAAE,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YACvC,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,QAAQ,EAAE,OAAO,CAAC,QAAQ;SAC3B,EACD,OAAO,EACP,QAAQ,CACT,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,2FAA2F;QAC3F,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACtB,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACtD;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE;YAClD,OAAO;SACR;QAED,kEAAkE;QAClE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAE5D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAEhE,IAAI,MAAM,EAAE;YACV,+BAA+B;YAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YACpC,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,YAAY,CAAC;YAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;YAChC,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC;YACpC,gDAAgD;YAChD,IAAI,CAAC,MAAM,CAAC,qBAAqB,GAAG,gBAAgB,CAAC;SACtD;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM;QACV,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC/B,4EAA4E;QAC5E,OAAO;YACL,aAAa,EAAE,IAAI,CAAC,YAAY;YAChC,SAAS,EAAE,IAAI,CAAC,QAAQ;YACxB,YAAY,EAAE,IAAI,CAAC,WAAW;YAC9B,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { AuthorizationRequest, AuthorizationRequestJson, Crypto, StringMap } from '@openid/appauth';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\nimport { ExpoCrypto } from './ExpoCrypto';\n\nexport type CodeChallengeMethod = 'S256' | 'plain';\n\nexport interface ExpoAuthorizationRequestJson {\n  responseType?: string;\n  clientId: string;\n  redirectUri: string;\n  scopes: string[];\n  state?: string;\n  extras?: StringMap;\n  internal?: StringMap;\n}\n\nconst SIZE = 10; // 10 bytes (like Node)\n\nconst CHALLENGE_METHOD = 'S256';\n\n/**\n * Represents the AuthorizationRequest.\n * For more information look at\n * https://tools.ietf.org/html/rfc6749#section-4.1.1\n */\nexport class ExpoAuthorizationRequest extends AuthorizationRequest {\n  // NOTE:\n  // Both redirect_uri and state are actually optional.\n  // However AppAuth is more opionionated, and requires you to use both.\n\n  _crypto: Crypto;\n  _usePkce: boolean;\n\n  /**\n   * Constructs a new AuthorizationRequest.\n   * Use a `undefined` value for the `state` parameter, to generate a random\n   * state for CSRF protection.\n   */\n  constructor(\n    request: ExpoAuthorizationRequestJson,\n    // @ts-ignore: This requires a sync method\n    _crypto: Crypto = new ExpoCrypto(),\n    _usePkce: boolean = true\n  ) {\n    invariant(\n      request.responseType,\n      `\\`ExpoAuthorizationRequest\\` requires a valid \\`responseType\\`.`\n    );\n    invariant(\n      request.redirectUri,\n      `\\`ExpoAuthorizationRequest\\` requires a valid \\`redirectUri\\`. Example: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n    super(\n      {\n        response_type: request.responseType!,\n        client_id: request.clientId,\n        redirect_uri: request.redirectUri,\n        scope: (request.scopes || []).join(' '),\n        state: request.state,\n        extras: request.extras,\n        internal: request.internal,\n      },\n      _crypto,\n      _usePkce\n    );\n\n    this._crypto = _crypto;\n    this._usePkce = _usePkce;\n\n    // @ts-ignore: hack to prevent unsafe, this is reassigned in setupCodeVerifier if it's null\n    this.state = null;\n  }\n\n  async setupCodeVerifier(): Promise<void> {\n    if (this.state == null) {\n      this.state = await this._crypto.generateRandom(SIZE);\n    }\n    if (!this._usePkce || this.internal?.code_verifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const codeVerifier = await this._crypto.generateRandom(128);\n\n    const result = await this._crypto.deriveChallenge(codeVerifier);\n\n    if (result) {\n      // keep track of the code used.\n      this.internal = this.internal || {};\n      this.internal.code_verifier = codeVerifier;\n      this.extras = this.extras || {};\n      this.extras.code_challenge = result;\n      // We always use S256. Plain is not good enough.\n      this.extras.code_challenge_method = CHALLENGE_METHOD;\n    }\n  }\n\n  /**\n   * Serializes the AuthorizationRequest to a JavaScript Object.\n   */\n  async toJson(): Promise<AuthorizationRequestJson> {\n    await this.setupCodeVerifier();\n    // Always make sure that the code verifier is setup when toJson() is called.\n    return {\n      response_type: this.responseType,\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri,\n      scope: this.scope,\n      state: this.state,\n      extras: this.extras,\n      internal: this.internal,\n    };\n  }\n}\n"]}