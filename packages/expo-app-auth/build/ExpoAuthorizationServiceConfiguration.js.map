{"version":3,"file":"ExpoAuthorizationServiceConfiguration.js","sourceRoot":"","sources":["../src/ExpoAuthorizationServiceConfiguration.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iCAAiC,GAGlC,MAAM,iBAAiB,CAAC;AAEzB,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD;;;GAGG;AACH,MAAM,eAAe,GAAG,aAAa,CAAC;AAEtC;;;GAGG;AACH,MAAM,oBAAoB,GAAG,sBAAsB,CAAC;AA4CpD;;;;;GAKG;AACH,MAAM,OAAO,qCAAsC,SAAQ,iCAAiC;IAK1F,YAAY,EACV,qBAAqB,EAAE,sBAAsB,EAC7C,aAAa,EAAE,cAAc,EAC7B,kBAAkB,EAAE,mBAAmB,EACvC,gBAAgB,EAAE,iBAAiB,EACnC,kBAAkB,EAAE,oBAAoB,EACxC,oBAAoB,EACpB,GAAG,OAAO,EACgC;QAC1C,KAAK,CAAC;YACJ,sBAAsB;YACtB,cAAc;YACd,8FAA8F;YAC9F,mBAAmB;YACnB,iBAAiB;YACjB,oBAAoB;SACrB,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,GAAG;YACvB,GAAG,OAAO;YACV,sBAAsB;YACtB,cAAc;YACd,mBAAmB;YACnB,iBAAiB;YACjB,oBAAoB;SACd,CAAC;QAET,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;IAED,gCAAgC;IAChC,MAAM;QACJ,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,eAAe,CAC1B,eAAuB,EACvB,SAAqB;QAErB,MAAM,OAAO,GAAG,GAAG,eAAe,IAAI,eAAe,IAAI,oBAAoB,EAAE,CAAC;QAEhF,MAAM,cAAc,GAAG,SAAS,IAAI,IAAI,aAAa,EAAE,CAAC;QAExD,MAAM,EACJ,sBAAsB,EACtB,cAAc,EACd,mBAAmB,EACnB,iBAAiB,EACjB,oBAAoB,EACpB,qBAAqB,EACrB,GAAG,IAAI,EACR,GAAG,CAAC,MAAM,cAAc,CAAC,GAAG,CAAwC;YACnE,GAAG,EAAE,OAAO;YACZ,QAAQ,EAAE,MAAM;YAChB,MAAM,EAAE,KAAK;SACd,CAAC,CAAQ,CAAC;QACX,OAAO,IAAI,qCAAqC,CAAC;YAC/C,GAAG,IAAI;YACP,qBAAqB,EAAE,sBAAsB;YAC7C,aAAa,EAAE,cAAc;YAC7B,kBAAkB,EAAE,mBAAmB;YACvC,gBAAgB,EAAE,iBAAiB;YACnC,kBAAkB,EAAE,oBAAoB;YACxC,oBAAoB,EAAE,qBAAqB;SAC5C,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import {\n  AuthorizationServiceConfiguration,\n  AuthorizationServiceConfigurationJson,\n  Requestor,\n} from '@openid/appauth';\n\nimport { ExpoRequestor } from './ExpoRequestor';\n\n/**\n * The standard base path for well-known resources on domains.\n * See https://tools.ietf.org/html/rfc5785 for more information.\n */\nconst WELL_KNOWN_PATH = '.well-known';\n\n/**\n * The standard resource under the well known path at which an OpenID Connect\n * discovery document can be found under an issuer's base URI.\n */\nconst OPENID_CONFIGURATION = 'openid-configuration';\n\n/**\n * Represents AuthorizationServiceConfiguration as a user-friendly JSON object.\n * Adds support for dynamic URI registration.\n */\nexport interface ExpoAuthorizationServiceConfigurationJson {\n  authorizationEndpoint: string;\n  tokenEndpoint: string;\n  // The API specifies that this should be required, but some servers like Spotify do not provide one.\n  revocationEndpoint?: string;\n  userInfoEndpoint?: string;\n  endSessionEndpoint?: string;\n  /**\n   * The dynamic client registration endpoint URI.\n   */\n  registrationEndpoint?: string;\n}\n\nexport type DiscoveryDocument = Record<string, string | boolean | string[]> & {\n  authorization_endpoint?: string;\n  token_endpoint?: string;\n  revocation_endpoint?: string;\n  userinfo_endpoint?: string;\n  end_session_endpoint?: string;\n  claims_supported?: string[];\n  check_session_iframe?: string;\n  backchannel_logout_supported?: boolean;\n  backchannel_logout_session_supported?: boolean;\n  code_challenge_methods_supported?: string[];\n  device_authorization_endpoint?: string;\n  frontchannel_logout_session_supported?: boolean;\n  frontchannel_logout_supported?: boolean;\n  grant_types_supported?: string[];\n  id_token_signing_alg_values_supported?: string[];\n  introspection_endpoint?: string;\n  issuer?: string;\n  jwks_uri?: string;\n  request_parameter_supported?: boolean;\n  response_modes_supported?: string[];\n  scopes_supported?: string[];\n  subject_types_supported?: string[];\n  token_endpoint_auth_methods_supported?: string[];\n};\n/**\n * Configuration details required to interact with an authorization service.\n * Expo adds support for discoveryDocument\n *\n * More information at https://openid.net/specs/openid-connect-discovery-1_0-17.html\n */\nexport class ExpoAuthorizationServiceConfiguration extends AuthorizationServiceConfiguration {\n  // TODO(Bacon): This supports more properties on iOS\n  discoveryDocument: DiscoveryDocument;\n  registrationEndpoint?: string;\n\n  constructor({\n    authorizationEndpoint: authorization_endpoint,\n    tokenEndpoint: token_endpoint,\n    revocationEndpoint: revocation_endpoint,\n    userInfoEndpoint: userinfo_endpoint,\n    endSessionEndpoint: end_session_endpoint,\n    registrationEndpoint,\n    ...request\n  }: ExpoAuthorizationServiceConfigurationJson) {\n    super({\n      authorization_endpoint,\n      token_endpoint,\n      // @ts-ignore: A useful error will be thrown if you try to revoke a token without an endpoint.\n      revocation_endpoint,\n      userinfo_endpoint,\n      end_session_endpoint,\n    });\n\n    this.discoveryDocument = {\n      ...request,\n      authorization_endpoint,\n      token_endpoint,\n      revocation_endpoint,\n      userinfo_endpoint,\n      end_session_endpoint,\n    } as any;\n\n    this.registrationEndpoint = registrationEndpoint;\n  }\n\n  // @ts-ignore: Invalid extension\n  toJson(): DiscoveryDocument {\n    return this.discoveryDocument;\n  }\n\n  static async fetchFromIssuer(\n    openIdIssuerUrl: string,\n    requestor?: Requestor\n  ): Promise<ExpoAuthorizationServiceConfiguration> {\n    const fullUrl = `${openIdIssuerUrl}/${WELL_KNOWN_PATH}/${OPENID_CONFIGURATION}`;\n\n    const requestorToUse = requestor || new ExpoRequestor();\n\n    const {\n      authorization_endpoint,\n      token_endpoint,\n      revocation_endpoint,\n      userinfo_endpoint,\n      end_session_endpoint,\n      registration_endpoint,\n      ...json\n    } = (await requestorToUse.xhr<AuthorizationServiceConfigurationJson>({\n      url: fullUrl,\n      dataType: 'json',\n      method: 'GET',\n    })) as any;\n    return new ExpoAuthorizationServiceConfiguration({\n      ...json,\n      authorizationEndpoint: authorization_endpoint,\n      tokenEndpoint: token_endpoint,\n      revocationEndpoint: revocation_endpoint,\n      userInfoEndpoint: userinfo_endpoint,\n      endSessionEndpoint: end_session_endpoint,\n      registrationEndpoint: registration_endpoint,\n    });\n  }\n}\n"]}