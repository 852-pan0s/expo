{"version":3,"file":"ExpoRequestHandler.js","sourceRoot":"","sources":["../src/ExpoRequestHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AuthorizationError,\n  AuthorizationRequest,\n  AuthorizationRequestHandler,\n  AuthorizationRequestResponse,\n  AuthorizationResponse,\n  BasicQueryStringUtils,\n  Crypto,\n  QueryStringUtils,\n  StringMap,\n  StorageBackend,\n  LocationLike,\n  AppAuthError,\n} from '@openid/appauth';\nimport * as WebBrowser from 'expo-web-browser';\nimport qs from 'qs';\nimport { Platform } from 'react-native';\n\nimport { ExpoAuthorizationServiceConfiguration } from './ExpoAuthorizationServiceConfiguration';\nimport { ExpoCrypto } from './ExpoCrypto';\nimport { ExpoStorageBackend } from './ExpoStorage';\n\n/**\n * key for authorization request.\n */\nconst authorizationRequestKey = (handle: string) => {\n  return `${handle}_expo_appauth_authorization_request`;\n};\n\n/**\n * key for authorization service configuration\n */\nconst authorizationServiceConfigurationKey = (handle: string) => {\n  return `${handle}_expo_appauth_authorization_service_configuration`;\n};\n\n/**\n * key in local storage which represents the current authorization request.\n */\nconst AUTHORIZATION_REQUEST_HANDLE_KEY = 'expo_appauth_current_authorization_request';\n\nexport class ExpoRequestHandler extends AuthorizationRequestHandler {\n  static getQueryParams = (url: string): Record<string, string> => {\n    const parts = url.split('#');\n    const hash = parts[1];\n    const partsWithoutHash = parts[0].split('?');\n    const queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n    // Get query string (?hello=world)\n    const parsedSearch = qs.parse(queryString);\n\n    // TODO(Bacon): Should we support errorCode like expo-auth-session?\n    // Pull errorCode off of params\n    // let { errorCode } = parsedSearch;\n    // delete parsedSearch.errorCode;\n\n    // Get hash (#abc=example)\n    let parsedHash = {};\n    if (parts[1]) {\n      parsedHash = qs.parse(hash);\n    }\n\n    // Merge search and hash\n    const params = {\n      ...parsedSearch,\n      ...parsedHash,\n    };\n\n    return params;\n  };\n\n  private error: AuthorizationError | null = null;\n  private request: AuthorizationRequest | null = null;\n  private authPromise?: Promise<any>;\n  private url?: string;\n\n  constructor(\n    public locationLike: LocationLike = window.location,\n    public storageBackend: StorageBackend = new ExpoStorageBackend(),\n    utils: QueryStringUtils = new BasicQueryStringUtils(),\n    // @ts-ignore\n    crypto: Crypto = new ExpoCrypto()\n  ) {\n    super(utils, crypto);\n  }\n\n  performAuthorizationRequest(\n    configuration: any | ExpoAuthorizationServiceConfiguration,\n    request: AuthorizationRequest\n  ): void {\n    this.request = request;\n\n    this.authPromise = new Promise((resolve, reject) => {\n      // Calling toJson() adds in the code & challenge when possible\n      request\n        .toJson()\n        .then(async requestJson => {\n          if (this.request) this.request.state = requestJson.state!;\n\n          const handle = await this.crypto.generateRandom(10);\n\n          // before you make request, persist all request related data in local storage.\n          await Promise.all([\n            this.storageBackend.setItem(AUTHORIZATION_REQUEST_HANDLE_KEY, handle),\n\n            this.storageBackend.setItem(\n              authorizationRequestKey(handle),\n              JSON.stringify(requestJson)\n            ),\n            this.storageBackend.setItem(\n              authorizationServiceConfigurationKey(handle),\n              JSON.stringify(configuration.toJson())\n            ),\n          ]);\n\n          const url = this.buildRequestUrl(configuration, request);\n\n          console.log('Making a request to ', request, url);\n          const payload = await Platform.select<any>({\n            web: async () => {\n              window.location.href = url;\n              // TODO(Bacon): Support mini-window\n              // const width = 880;\n              // const height = 380;\n              // const popup = window.open(\n              //   url,\n              //   'Authenticate',\n              //   `width=${width}, height=${height}, modal=no, resizable=no, toolbar=no, menubar=no, scrollbars=no, alwaysRaise=yes`\n              // );\n              // if (popup) popup.resizeBy(0, 50);\n            },\n            default: () => WebBrowser.openAuthSessionAsync(url, request.redirectUri),\n          })();\n          if (Platform.OS === 'web') {\n            resolve();\n            return;\n          }\n\n          if (payload.type === 'success') {\n            this.url = payload.url;\n            resolve();\n          } else {\n            // TODO(Bacon): Throw some kind of error for dismiss / cancel.\n            const error = new AppAuthError(`Authorization flow was cancelled.`, {\n              // -3 is the iOS code for user dismissed.\n              code: -3,\n              // @ts-ignore: message is not on the type\n              message: payload.message,\n              type: payload.type,\n            });\n            reject(error);\n          }\n        })\n        .catch(reject);\n    });\n  }\n\n  private getQueryParams(): StringMap {\n    if (Platform.OS === 'web') {\n      return this.utils.parse(this.locationLike, false /* don't use hash */);\n    }\n    if (!this.url) throw new Error('Auth did not complete properly');\n    return ExpoRequestHandler.getQueryParams(this.url!);\n  }\n\n  async completeAuthorizationRequestWithRequestAsync(\n    handle: string,\n    request: AuthorizationRequest\n  ): Promise<AuthorizationRequestResponse | null> {\n    const queryParams = this.getQueryParams();\n    const state: string | undefined = queryParams['state'];\n    const code: string | undefined = queryParams['code'];\n    const error: string | undefined = queryParams['error'];\n    // let error: string | undefined = queryParams['error'] ?? queryParams['errorCode'];\n    console.log('Potential authorization request ', queryParams, state, code, error);\n    const shouldNotify = state === request.state;\n    let authorizationResponse: AuthorizationResponse | null = null;\n    let authorizationError: AuthorizationError | null = null;\n\n    if (!shouldNotify) {\n      console.log('Mismatched request (state and request_uri) dont match.');\n      return null;\n    }\n\n    if (error) {\n      // get additional optional info.\n      const errorUri = queryParams['error_uri'];\n      const errorDescription = queryParams['error_description'];\n      authorizationError = new AuthorizationError({\n        error,\n        error_description: errorDescription,\n        error_uri: errorUri,\n        state,\n      });\n    } else {\n      authorizationResponse = new AuthorizationResponse({ code, state });\n    }\n\n    // cleanup state\n    await Promise.all([\n      this.storageBackend.removeItem(AUTHORIZATION_REQUEST_HANDLE_KEY),\n      this.storageBackend.removeItem(authorizationRequestKey(handle)),\n      this.storageBackend.removeItem(authorizationServiceConfigurationKey(handle)),\n    ]);\n\n    console.log('Delivering authorization response');\n    return {\n      request,\n      response: authorizationResponse,\n      error: authorizationError,\n    } as AuthorizationRequestResponse;\n  }\n\n  async getOrRehydrateRequestAsync(): Promise<AuthorizationRequest | null> {\n    if (this.request) return this.request;\n    const handle = await this.storageBackend.getItem(AUTHORIZATION_REQUEST_HANDLE_KEY);\n    if (!handle) return null;\n    // we have a pending request.\n    // fetch authorization request, and check state\n    const request = await this.storageBackend\n      .getItem(authorizationRequestKey(handle))\n      // requires a corresponding instance of result\n      .then(result => JSON.parse(result!))\n      .then(json => new AuthorizationRequest(json));\n    this.request = request;\n    return request;\n  }\n\n  /**\n   * Attempts to introspect the contents of storage backend and completes the\n   * request.\n   */\n  protected async completeAuthorizationRequest(): Promise<AuthorizationRequestResponse | null> {\n    if (this.authPromise) await this.authPromise;\n    const handle = await this.storageBackend.getItem(AUTHORIZATION_REQUEST_HANDLE_KEY);\n    if (!handle) return null;\n    // we have a pending request.\n    // fetch authorization request, and check state\n    const request = await this.getOrRehydrateRequestAsync();\n    if (!request) throw new Error('Cannot complete an auth that has not begun');\n\n    if (Platform.OS !== 'web') {\n      if (!this.url) throw new Error('Auth did not complete properly');\n      if (this.error) {\n        const error = this.error;\n        this.error = null;\n        return {\n          request,\n          response: null,\n          error,\n        } as AuthorizationRequestResponse;\n      }\n    }\n\n    return await this.completeAuthorizationRequestWithRequestAsync(handle, request);\n  }\n}\n"]}