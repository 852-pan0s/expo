{"version":3,"file":"ExpoRegistrationHandler.js","sourceRoot":"","sources":["../src/ExpoRegistrationHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AppAuthError,\n  BasicQueryStringUtils,\n  QueryStringUtils,\n  Requestor,\n  StringMap,\n  TokenError,\n  TokenErrorJson,\n} from '@openid/appauth';\nimport { Platform } from 'react-native';\n\nimport { ExpoAuthorizationServiceConfiguration } from './ExpoAuthorizationServiceConfiguration';\nimport { ExpoRequestor } from './ExpoRequestor';\nimport GrantType from './GrantType';\n\n// A custom module built to replicate the native dynamic register functionality\n\nexport type ExpoRegistrationErrorJson = TokenErrorJson;\n\nexport class ExpoRegistrationError extends TokenError {}\n\nexport type ExpoRegistrationResponseJson = {\n  client_id_issued_at: number;\n  client_secret_expires_at: number;\n  client_id: string;\n  client_secret: string;\n  registration_access_token: string;\n  registration_client_uri: string;\n  extras: StringMap;\n};\n\nexport class ExpoRegistrationResponse {\n  clientIDIssuedAt: number;\n  clientSecretExpiresAt: number;\n  clientID: string;\n  clientSecret: string;\n  registrationAccessToken: string;\n  registrationClientURI: string;\n  extras: StringMap;\n\n  constructor(options: ExpoRegistrationResponseJson) {\n    this.clientIDIssuedAt = options.client_id_issued_at;\n    this.clientSecretExpiresAt = options.client_secret_expires_at;\n    this.clientID = options.client_id;\n    this.clientSecret = options.client_secret;\n    this.registrationAccessToken = options.registration_access_token;\n    this.registrationClientURI = options.registration_client_uri;\n    this.extras = options.extras;\n  }\n\n  toJson() {\n    return {\n      client_id_issued_at: this.clientIDIssuedAt,\n      client_secret_expires_at: this.clientSecretExpiresAt,\n      client_id: this.clientID,\n      client_secret: this.clientSecret,\n      registration_access_token: this.registrationAccessToken,\n      registration_client_uri: this.registrationClientURI,\n    };\n  }\n\n  // TODO: bacon: add `isValid`\n}\n\nexport interface ExpoRegistrationRequestJson {\n  /**\n   * Client's redirect URI's\n   *\n   * https://tools.ietf.org/html/rfc6749#section-3.1.2\n   */\n  redirect_uris: string[];\n  /**\n   * Response types to use.\n   *\n   * [OpenID Connect Core 1.0, Section 3](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3)\n   */\n  response_types: string[];\n  /**\n   * Grant types to use.\n   *\n   * [OpenID Connect Dynamic Client Registration 1.0, Section 2](https://openid.net/specs/openid-connect-discovery-1_0.html#rfc.section.2)\n   */\n  grant_types: GrantType[];\n  /**\n   * Subject type to use.\n   *\n   * [OpenID Connect Core 1.0, Section 8](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.8)\n   */\n  subject_type?: string;\n  /**\n   * Client auth method to use at the token endpoint.\n   *\n   * [OpenID Connect Core 1.0, Section 9](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.9)\n   */\n  token_endpoint_auth_method?: string;\n  initial_access_token?: string;\n  extras?: Record<string, any>;\n}\n\nexport type ExpoRegistrationApplicationType = 'web' | 'native';\n\nexport class ExpoRegistrationRequest {\n  /**\n   * Instructs the authorization server to generate a pairwise subject identifier.\n   *\n   * [OpenID Connect Core 1.0, Section 8](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.8)\n   */\n  public static SUBJECT_TYPE_PAIRWISE = 'pairwise';\n\n  /**\n   * Instructs the authorization server to generate a public subject identifier.\n   *\n   * [OpenID Connect Core 1.0, Section 8](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.8)\n   */\n  public static SUBJECT_TYPE_PUBLIC = 'public';\n\n  redirectURIs: string[];\n  responseTypes: string[];\n  grantTypes: GrantType[];\n  subjectType?: string;\n  tokenEndpointAuthMethod?: string;\n  initialAccessToken?: string;\n  extras?: Record<string, any>;\n  /**\n   * Must always be native\n   * https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata\n   */\n  applicationType: ExpoRegistrationApplicationType = Platform.select({\n    web: 'web',\n    default: 'native',\n  });\n\n  constructor(options: ExpoRegistrationRequestJson) {\n    this.redirectURIs = options.redirect_uris;\n    this.responseTypes = options.response_types;\n    this.grantTypes = options.grant_types;\n    this.subjectType = options.subject_type;\n    this.tokenEndpointAuthMethod = options.token_endpoint_auth_method;\n    this.initialAccessToken = options.initial_access_token;\n    this.extras = options.extras;\n  }\n\n  toJson() {\n    return {\n      redirect_uris: this.redirectURIs.join(' '),\n      response_types: this.responseTypes.join(' '),\n      grant_types: this.grantTypes.join(' '),\n      subject_type: this.subjectType || '',\n      application_type: this.applicationType || '',\n      token_endpoint_auth_method: this.tokenEndpointAuthMethod || '',\n      initial_access_token: this.initialAccessToken || '',\n    };\n  }\n\n  toStringMap(): StringMap {\n    const map = this.toJson();\n\n    // copy over extras\n    if (this.extras) {\n      for (const extra in this.extras) {\n        if (extra in this.extras && !(extra in map)) {\n          // check before inserting to requestMap\n          map[extra] = this.extras[extra];\n        }\n      }\n    }\n    return map;\n  }\n}\n\nexport class ExpoRegistrationHandler {\n  constructor(\n    public requestor: Requestor = new ExpoRequestor(),\n    public utils: QueryStringUtils = new BasicQueryStringUtils()\n  ) {}\n\n  private isRegistrationResponse(\n    response: ExpoRegistrationResponseJson | ExpoRegistrationErrorJson\n  ): response is ExpoRegistrationResponseJson {\n    return (response as ExpoRegistrationErrorJson).error === undefined;\n  }\n\n  async performRegistrationRequest(\n    configuration: ExpoAuthorizationServiceConfiguration,\n    request: ExpoRegistrationRequest\n  ): Promise<ExpoRegistrationResponse> {\n    if (!configuration.registrationEndpoint) {\n      throw new ExpoRegistrationError({\n        error_description:\n          'The registration request could not be created because the registration URL is missing.',\n        error: 'invalid_request',\n      });\n    }\n    const response = await this.requestor.xhr<\n      ExpoRegistrationResponseJson | ExpoRegistrationErrorJson\n    >({\n      url: configuration.registrationEndpoint,\n      method: 'POST',\n      dataType: 'json', // adding implicit dataType\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      data: this.utils.stringify(request.toStringMap()),\n    });\n\n    if (this.isRegistrationResponse(response)) {\n      return new ExpoRegistrationResponse(response);\n    }\n\n    throw new AppAuthError(response.error, new ExpoRegistrationError(response));\n  }\n}\n"]}