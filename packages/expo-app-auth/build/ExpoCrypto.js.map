{"version":3,"file":"ExpoCrypto.js","sourceRoot":"","sources":["../src/ExpoCrypto.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the\n * License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Crypto, AppAuthError } from '@openid/appauth';\nimport * as ExpoNativeCrypto from 'expo-crypto';\nimport * as ExpoRandom from 'expo-random';\nimport { Platform } from 'react-native';\n\nconst HAS_CRYPTO = Platform.OS === 'web' && !!(window?.crypto as any);\n\nconst CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\nconst keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n// From react-native-base64\nexport function encodeBase64NoWrap(input: string): string {\n  let output = '';\n  let chr1: number | undefined;\n  let chr2: number | undefined;\n  let chr3: number | undefined;\n\n  let enc1: number | undefined;\n  let enc2: number | undefined;\n  let enc3: number | undefined;\n  let enc4: number | undefined;\n  let i = 0;\n\n  do {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n\n    enc1 = chr1 >> 2;\n    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    enc4 = chr3 & 63;\n    if (isNaN(chr2)) {\n      enc3 = 64;\n      enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output =\n      output +\n      keyStr.charAt(enc1) +\n      keyStr.charAt(enc2) +\n      keyStr.charAt(enc3) +\n      keyStr.charAt(enc4);\n\n    chr1 = undefined;\n    chr2 = undefined;\n    chr3 = undefined;\n    enc1 = undefined;\n    enc2 = undefined;\n    enc3 = undefined;\n    enc4 = undefined;\n  } while (i < input.length);\n\n  return output;\n}\n\nexport function bufferToString(buffer: Uint8Array, charset: string = CHARSET): string {\n  let state: string[] = [];\n  for (let i = 0; i < buffer.byteLength; i += 1) {\n    let index = buffer[i] % charset.length;\n    state.push(charset[index]);\n  }\n  return state.join('');\n}\n\nexport function urlSafe(b64: string): string {\n  return b64\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\n// adapted from source: http://stackoverflow.com/a/11058858\n// this is used in place of TextEncode as the api is not yet\n// well supported: https://caniuse.com/#search=TextEncoder\nexport function textEncodeLite(str: string): Uint8Array {\n  const buf = new ArrayBuffer(str.length);\n  const bufView = new Uint8Array(buf);\n\n  for (let i = 0; i < str.length; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return bufView;\n}\n\nasync function getRandomValuesAsync(arr) {\n  let orig = arr;\n  if (arr.byteLength !== arr.length) {\n    // Get access to the underlying raw bytes\n    arr = new Uint8Array(arr.buffer);\n  }\n  const bytes = await ExpoRandom.getRandomBytesAsync(arr.length);\n  for (var i = 0; i < bytes.length; i++) {\n    arr[i] = bytes[i];\n  }\n\n  return orig;\n}\n\n/**\n * Extension of the default implementation of the `Crypto` interface.\n * This uses the capabilities of the native platform via Expo Unimodules.\n */\nexport class ExpoCrypto implements Crypto {\n  // TODO(Bacon): Change this to be sync in the future when Expo unimodules support sync methods\n  // @ts-ignore: we need to use async unfortunately\n  async generateRandom(size: number) {\n    let buffer = new Uint8Array(size);\n\n    if (HAS_CRYPTO) {\n      // TODO(Bacon): Make random be sync\n      await getRandomValuesAsync(buffer);\n    } else {\n      // fall back to Math.random() if nothing else is available\n      for (let i = 0; i < size; i += 1) {\n        buffer[i] = (Math.random() * CHARSET.length) | 0;\n      }\n    }\n    return bufferToString(buffer);\n  }\n\n  /**\n   * Compute the SHA256 of a given code.\n   * This is useful when using PKCE.\n   * Proof key for Code Exchange by OAuth Public Clients (RFC 7636), Section 4.1\n   * https://tools.ietf.org/html/rfc7636#section-4.1\n   */\n  async deriveChallenge(code: string): Promise<string> {\n    // 43 is the minimum, and 128 is the maximum.\n    if (code.length < 43 || code.length > 128) {\n      throw new AppAuthError('Invalid code length.');\n    }\n\n    const buffer = await ExpoNativeCrypto.digestStringAsync(\n      ExpoNativeCrypto.CryptoDigestAlgorithm.SHA256,\n      code,\n      { encoding: ExpoNativeCrypto.CryptoEncoding.BASE64 }\n    );\n    return urlSafe(buffer);\n  }\n}\n"]}