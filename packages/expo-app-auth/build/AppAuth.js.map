{"version":3,"file":"AppAuth.js","sourceRoot":"","sources":["../src/AppAuth.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAwC,MAAM,iBAAiB,CAAC;AAC7F,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,OAAO,EAAE,sBAAsB,EAA8B,MAAM,0BAA0B,CAAC;AAC9F,OAAO,EAAE,wBAAwB,EAAgC,MAAM,4BAA4B,CAAC;AACpG,OAAO,EACL,qCAAqC,GAEtC,MAAM,yCAAyC,CAAC;AACjD,OAAO,EAAE,uBAAuB,EAA+B,MAAM,2BAA2B,CAAC;AACjG,OAAO,EACL,uBAAuB,EACvB,uBAAuB,GAGxB,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,EAAE,sBAAsB,EAA8B,MAAM,0BAA0B,CAAC;AAC9F,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AAOpE;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,qBAA4C;IAE5C,SAAS,CACP,qBAAqB,IAAI,CAAC,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,qBAAqB,CAAC,EACtF,sDAAsD,CACvD,CAAC;IACF,IAAI,OAAO,qBAAqB,KAAK,QAAQ,EAAE;QAC7C,OAAO,MAAM,qCAAqC,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;KAC3F;SAAM,IAAI,qBAAqB,CAAC,WAAW,CAAC,IAAI,KAAK,uCAAuC,EAAE;QAC7F,OAAO,qBAA8D,CAAC;KACvE;IACD,OAAO,IAAI,qCAAqC,CAAC,qBAAqB,CAAC,CAAC;AAC1E,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,OAAiC,EACjC,qBAA4C;IAE5C,iGAAiG;IACjG,sBAAsB;IACtB,4DAA4D;IAC5D,mEAAmE;IACnE,eAAe;IACf,gEAAgE;IAChE,kEAAkE;IAClE,+CAA+C;IAC/C,SAAS,CACP,OAAO,CAAC,YAAY,KAAK,oBAAoB,CAAC,kBAAkB,EAChE,uGAAuG,CACxG,CAAC;IAEF,yBAAyB;IACzB,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;IACtE,MAAM,QAAQ,GAAG,MAAM,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAEzD,wEAAwE;IACxE,kEAAkE;IAClE,iBAAiB;IACjB,OAAO,MAAM,aAAa,CACxB;QACE,QAAQ,EAAE,OAAO,CAAC,QAAQ;QAC1B,WAAW,EAAE,OAAO,CAAC,WAAW;QAChC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI;QAC5B,YAAY,EAAE,QAAQ,CAAC,OAAO,EAAE,MAAM,EAAE,aAAa;QACrD,YAAY,EAAE,QAAQ,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa;KACxD,EACD,MAAM,CACP,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAC7B,KAAmC,EACnC,qBAA4C;IAE5C,MAAM,OAAO,GAAG,IAAI,wBAAwB,CAAC;QAC3C,YAAY,EAAE,oBAAoB,CAAC,kBAAkB;QACrD,GAAG,KAAK;KACT,CAAC,CAAC;IACH,OAAO,oBAAoB,CAAC,OAAO,EAAE,qBAAqB,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB,CACpC,OAAiC,EACjC,qBAA4C;IAE5C,aAAa;IACb,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;IACvB,yBAAyB;IACzB,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;IACtE,MAAM,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;IACzC,OAAO,MAAM,OAAO,CAAC,gCAAgC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACzE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,KAAiC,EACjC,qBAA4C;IAE5C,0CAA0C;IAC1C;;;;;;;;OAQG;IACH,MAAM,OAAO,GAAG,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,OAAO,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC9C,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;IACtE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACpE,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,KAAkC,EAClC,qBAA4C;IAE5C,MAAM,OAAO,GAAG,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACnD,MAAM,OAAO,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC9C,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;IACtE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAEpE,yDAAyD;IACzD,QAAQ,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,IAAI,KAAK,CAAC,YAAY,CAAC;IAEpE,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,KAAkC,EAClC,qBAA4C;IAE5C,MAAM,OAAO,GAAG,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACnD,MAAM,OAAO,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC9C,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;IACtE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,0BAA0B,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3E,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAC/B,KAAiC,EACjC,qBAA4C;IAE5C,MAAM,OAAO,GAAG,IAAI,sBAAsB,CAAC,KAAK,CAAC,CAAC;IAClD,MAAM,OAAO,GAAG,IAAI,uBAAuB,EAAE,CAAC;IAC9C,MAAM,MAAM,GAAG,MAAM,yBAAyB,CAAC,qBAAqB,CAAC,CAAC;IACtE,uFAAuF;IACvF,SAAS,CACP,MAAM,CAAC,kBAAkB,IAAI,OAAO,qBAAqB,KAAK,QAAQ,EACtE,4HAA4H,qBAAqB,qCAAqC,CACvL,CAAC;IACF,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,yBAAyB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC1E,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { AuthorizationRequest, AuthorizationResponse, TokenResponse } from '@openid/appauth';\nimport invariant from 'invariant';\n\nimport { ExpoAccessTokenRequest, ExpoAccessTokenRequestJson } from './ExpoAccessTokenRequest';\nimport { ExpoAuthorizationRequest, ExpoAuthorizationRequestJson } from './ExpoAuthorizationRequest';\nimport {\n  ExpoAuthorizationServiceConfiguration,\n  ExpoAuthorizationServiceConfigurationJson,\n} from './ExpoAuthorizationServiceConfiguration';\nimport { ExpoRefreshTokenRequest, ExpoRefreshTokenRequestJson } from './ExpoRefreshTokenRequest';\nimport {\n  ExpoRegistrationHandler,\n  ExpoRegistrationRequest,\n  ExpoRegistrationRequestJson,\n  ExpoRegistrationResponse,\n} from './ExpoRegistrationHandler';\nimport { ExpoRequestHandler } from './ExpoRequestHandler';\nimport { ExpoRevokeTokenRequest, ExpoRevokeTokenRequestJson } from './ExpoRevokeTokenRequest';\nimport { ExpoTokenRequestHandler } from './ExpoTokenRequestHandler';\n\nexport type IssuerOrServiceConfig =\n  | string\n  | ExpoAuthorizationServiceConfiguration\n  | ExpoAuthorizationServiceConfigurationJson;\n\n/**\n * Utility method for resolving the service config from an issuer or object.\n *\n * @param issuerOrServiceConfig\n */\nexport async function resolveServiceConfigAsync(\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<ExpoAuthorizationServiceConfiguration> {\n  invariant(\n    issuerOrServiceConfig && !['number', 'boolean'].includes(typeof issuerOrServiceConfig),\n    'Expected a valid service configuration or issuer URL'\n  );\n  if (typeof issuerOrServiceConfig === 'string') {\n    return await ExpoAuthorizationServiceConfiguration.fetchFromIssuer(issuerOrServiceConfig);\n  } else if (issuerOrServiceConfig.constructor.name === 'ExpoAuthorizationServiceConfiguration') {\n    return issuerOrServiceConfig as ExpoAuthorizationServiceConfiguration;\n  }\n  return new ExpoAuthorizationServiceConfiguration(issuerOrServiceConfig);\n}\n\n/**\n * Authenticate and auto exchange the code for an access token.\n */\nexport async function authAndExchangeAsync(\n  request: ExpoAuthorizationRequest,\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<TokenResponse> {\n  // Using responseType token probably indicates that the developer wants to perform a hybrid flow.\n  // Two possible cases:\n  // 1. The code is not for this client, ie. will be sent to a\n  //    web service that performs the ID token verification and token\n  //    exchange.\n  // 2. The code is for this client and, for security reasons, the\n  //    application developer must verify the id_token signature and\n  //    c_hash before calling the token endpoint.\n  invariant(\n    request.responseType === AuthorizationRequest.RESPONSE_TYPE_CODE,\n    `Expected { responseType: 'code' }. Please use AppAuth.authRequestAsync() directly for token requests.`\n  );\n\n  // Get the service config\n  const config = await resolveServiceConfigAsync(issuerOrServiceConfig);\n  const response = await authRequestAsync(request, config);\n\n  // If the request is for the code flow (NB. not hybrid), then assume the\n  // code is intended for this client, and perform the authorization\n  // code exchange.\n  return await exchangeAsync(\n    {\n      clientId: request.clientId,\n      redirectUri: request.redirectUri,\n      code: response.response.code,\n      clientSecret: response.request?.extras?.client_secret,\n      codeVerifier: response.request?.internal?.code_verifier,\n    },\n    config\n  );\n}\n\n/**\n * Authenticate and auto exchange the code for an access token.\n *\n * @deprecated Use `AppAuth.authAndExchangeAsync()` instead.\n */\nexport async function authAsync(\n  props: ExpoAuthorizationRequestJson,\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<TokenResponse> {\n  const request = new ExpoAuthorizationRequest({\n    responseType: AuthorizationRequest.RESPONSE_TYPE_CODE,\n    ...props,\n  });\n  return authAndExchangeAsync(request, issuerOrServiceConfig);\n}\n\n/**\n * Make an auth request that returns the auth code which can be exchanged for an access token.\n *\n * @param request\n * @param issuerOrServiceConfig\n */\nexport async function authRequestAsync(\n  request: ExpoAuthorizationRequest,\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<{ request: AuthorizationRequest; response: AuthorizationResponse }> {\n  // Eval early\n  await request.toJson();\n  // Get the service config\n  const config = await resolveServiceConfigAsync(issuerOrServiceConfig);\n  const handler = new ExpoRequestHandler();\n  return await handler.performAuthorizationRequestAsync(config, request);\n}\n\nexport async function exchangeAsync(\n  props: ExpoAccessTokenRequestJson,\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<TokenResponse> {\n  // use the code to make the token request.\n  /**\n   * If this fails (status 400), it's either because the PKCE code is wrong, or because too many params are being passed in the body:\n   * If you get the error `invalid_grant` please refer to https://www.oauth.com/oauth2-servers/pkce/authorization-code-exchange/\n   *\n   * grant_type=authorization_code\n   * redirect_uri=''\n   * code=''\n   * code_verifier=''\n   */\n  const request = new ExpoAccessTokenRequest(props);\n  const handler = new ExpoTokenRequestHandler();\n  const config = await resolveServiceConfigAsync(issuerOrServiceConfig);\n  const response = await handler.performTokenRequest(config, request);\n  return response;\n}\n\nexport async function refreshAsync(\n  props: ExpoRefreshTokenRequestJson,\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<TokenResponse> {\n  const request = new ExpoRefreshTokenRequest(props);\n  const handler = new ExpoTokenRequestHandler();\n  const config = await resolveServiceConfigAsync(issuerOrServiceConfig);\n  const response = await handler.performTokenRequest(config, request);\n\n  // Custom: reuse the refresh token if one wasn't returned\n  response.refreshToken = response.refreshToken ?? props.refreshToken;\n\n  return response;\n}\n\nexport async function registerAsync(\n  props: ExpoRegistrationRequestJson,\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<ExpoRegistrationResponse> {\n  const request = new ExpoRegistrationRequest(props);\n  const handler = new ExpoRegistrationHandler();\n  const config = await resolveServiceConfigAsync(issuerOrServiceConfig);\n  const response = await handler.performRegistrationRequest(config, request);\n  return response;\n}\n\nexport async function revokeAsync(\n  props: ExpoRevokeTokenRequestJson,\n  issuerOrServiceConfig: IssuerOrServiceConfig\n): Promise<boolean> {\n  const request = new ExpoRevokeTokenRequest(props);\n  const handler = new ExpoTokenRequestHandler();\n  const config = await resolveServiceConfigAsync(issuerOrServiceConfig);\n  // Add a slightly more helpful error message for issuers that don't support revocation.\n  invariant(\n    config.revocationEndpoint || typeof issuerOrServiceConfig !== 'string',\n    `Cannot revoke token without a valid revocation endpoint in the authorization service configuration. The supplied issuer \"${issuerOrServiceConfig}\" may not support token revocation.`\n  );\n  const response = await handler.performRevokeTokenRequest(config, request);\n  return response;\n}\n"]}