{"version":3,"file":"RegistrationHandler.js","sourceRoot":"","sources":["../src/RegistrationHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AppAuthError,\n  BasicQueryStringUtils,\n  QueryStringUtils,\n  Requestor,\n  StringMap,\n  TokenError,\n  TokenErrorJson,\n} from '@openid/appauth';\nimport { Platform } from 'react-native';\n\nimport { ExpoAuthorizationServiceConfiguration } from './ExpoAuthorizationServiceConfiguration';\nimport { ExpoRequestor } from './ExpoRequestor';\nimport GrantType from './GrantType';\n\n// A custom module built to replicate the native dynamic register functionality\n\nexport type RegistrationErrorJson = TokenErrorJson;\n\nexport class RegistrationError extends TokenError {}\n\nexport type RegistrationResponseJson = {\n  client_id_issued_at?: number;\n  client_secret_expires_at?: number;\n  client_id: string;\n  client_secret?: string;\n  registration_access_token: string;\n  registration_client_uri: string;\n  extras: StringMap;\n};\n\nexport class RegistrationResponse {\n  clientIdIssuedAt?: number;\n  clientSecretExpiresAt?: number;\n  clientId: string;\n  clientSecret?: string;\n  registrationAccessToken: string;\n  registrationClientUri: string;\n  extras: StringMap;\n\n  constructor(options: RegistrationResponseJson) {\n    this.clientIdIssuedAt = options.client_id_issued_at;\n    this.clientSecretExpiresAt = options.client_secret_expires_at;\n    this.clientId = options.client_id;\n    this.clientSecret = options.client_secret;\n    this.registrationAccessToken = options.registration_access_token;\n    this.registrationClientUri = options.registration_client_uri;\n    this.extras = options.extras;\n  }\n\n  toJson() {\n    return {\n      client_id_issued_at: this.clientIdIssuedAt,\n      client_secret_expires_at: this.clientSecretExpiresAt,\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      registration_access_token: this.registrationAccessToken,\n      registration_client_uri: this.registrationClientUri,\n    };\n  }\n\n  // TODO: bacon: add `isValid`\n}\n\nexport interface RegistrationRequestJson {\n  /**\n   * Client's redirect URI's\n   *\n   * https://tools.ietf.org/html/rfc6749#section-3.1.2\n   */\n  redirect_uris: string[];\n  /**\n   * Response types to use.\n   *\n   * [OpenID Connect Core 1.0, Section 3](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3)\n   */\n  response_types: string[];\n  /**\n   * Grant types to use.\n   *\n   * [OpenID Connect Dynamic Client Registration 1.0, Section 2](https://openid.net/specs/openid-connect-discovery-1_0.html#rfc.section.2)\n   */\n  grant_types?: GrantType[];\n  /**\n   * Subject type to use.\n   *\n   * [OpenID Connect Core 1.0, Section 8](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.8)\n   */\n  subject_type?: string;\n  /**\n   * Client auth method to use at the token endpoint.\n   *\n   * [OpenID Connect Core 1.0, Section 9](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.9)\n   */\n  token_endpoint_auth_method?: string;\n  /**\n   * The initial access token to access the Client Registration Endpoint (if required by the OpenID Provider).\n   * OAuth 2.0 Access Token optionally issued by an Authorization Server granting\n   * access to its Client Registration Endpoint. This token (if required) is\n   * provisioned out of band.\n   *\n   * [Section 3 of OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration)\n   */\n  initial_access_token?: string;\n  extras?: Record<string, any>;\n}\n\nexport type RegistrationApplicationType = 'web' | 'native' | 'browser' | 'service';\n\nexport class RegistrationRequest {\n  /**\n   * Instructs the authorization server to generate a pairwise subject identifier.\n   *\n   * [OpenID Connect Core 1.0, Section 8](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.8)\n   */\n  public static SUBJECT_TYPE_PAIRWISE = 'pairwise';\n\n  /**\n   * Instructs the authorization server to generate a public subject identifier.\n   *\n   * [OpenID Connect Core 1.0, Section 8](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.8)\n   */\n  public static SUBJECT_TYPE_PUBLIC = 'public';\n\n  /**\n   * Clients that have received a client_secret value from the Authorization Server authenticate with the Authorization Server in accordance with Section 2.3.1 of OAuth 2.0 [RFC6749] using the HTTP Basic authentication scheme.\n   *\n   * [OpenID Connect Core 1.0, Section 9](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.9)\n   */\n  public static CLIENT_AUTH_CLIENT_SECRET_BASIC = 'client_secret_basic';\n  /**\n   * Clients that have received a client_secret value from the Authorization Server, authenticate with the Authorization Server in accordance with Section 2.3.1 of OAuth 2.0 [RFC6749] by including the Client Credentials in the request body.\n   *\n   * [OpenID Connect Core 1.0, Section 9](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.9)\n   */\n  public static CLIENT_AUTH_CLIENT_SECRET_POST = 'client_secret_post';\n  /**\n   * Clients that have received a client_secret value from the Authorization Server create a JWT using an HMAC SHA algorithm, such as HMAC SHA-256. The HMAC (Hash-based Message Authentication Code) is calculated using the octets of the UTF-8 representation of the client_secret as the shared key.\n   *\n   * [OpenID Connect Core 1.0, Section 9](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.9)\n   */\n  public static CLIENT_AUTH_CLIENT_SECRET_JWT = 'client_secret_jwt';\n  /**\n   * Clients that have registered a public key sign a JWT using that key.\n   *\n   * [OpenID Connect Core 1.0, Section 9](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.9)\n   */\n  public static CLIENT_AUTH_PRIVATE_KEY_JWT = 'private_key_jwt';\n  /**\n   * The Client does not authenticate itself at the Token Endpoint, either because it uses only the Implicit Flow (and so does not use the Token Endpoint) or because it is a Public Client with no Client Secret or other authentication mechanism.\n   *\n   * [OpenID Connect Core 1.0, Section 9](https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.9)\n   */\n  public static CLIENT_AUTH_NONE = 'none';\n\n  redirectUris: string[];\n  responseTypes: string[];\n  grantTypes?: GrantType[];\n  subjectType?: string;\n  tokenEndpointAuthMethod?: string;\n  initialAccessToken?: string;\n  extras?: Record<string, any>;\n  /**\n   * Must always be native\n   * https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata\n   */\n  applicationType: RegistrationApplicationType = Platform.select({\n    web: 'web',\n    default: 'native',\n  });\n\n  constructor(options: RegistrationRequestJson) {\n    this.redirectUris = options.redirect_uris;\n    this.responseTypes = options.response_types;\n    this.grantTypes = options.grant_types;\n    this.subjectType = options.subject_type;\n    this.tokenEndpointAuthMethod = options.token_endpoint_auth_method;\n    this.initialAccessToken = options.initial_access_token;\n    this.extras = options.extras;\n  }\n\n  toJson() {\n    return {\n      redirect_uris: (this.redirectUris ?? []).join(' '),\n      response_types: (this.responseTypes ?? []).join(' '),\n      grant_types: (this.grantTypes ?? []).join(' '),\n      subject_type: this.subjectType ?? '',\n      application_type: this.applicationType,\n      token_endpoint_auth_method: this.tokenEndpointAuthMethod ?? '',\n      initial_access_token: this.initialAccessToken ?? '',\n    };\n  }\n\n  toStringMap(): StringMap {\n    const {\n      redirect_uris,\n      response_types,\n      grant_types,\n      subject_type,\n      application_type,\n      token_endpoint_auth_method,\n    } = this.toJson();\n\n    const map: StringMap = {\n      redirect_uris,\n      application_type,\n    };\n\n    // Add extras first to allow them\n    // to be overwritten by request json\n    if (this.extras) {\n      for (const extra in this.extras) {\n        if (extra in this.extras && !(extra in map)) {\n          // check before inserting to requestMap\n          map[extra] = this.extras[extra];\n        }\n      }\n    }\n\n    if (response_types) {\n      map.response_types = response_types;\n    }\n    if (grant_types) {\n      map.grant_types = grant_types;\n    }\n    if (subject_type) {\n      map.subject_type = subject_type;\n    }\n    if (token_endpoint_auth_method) {\n      map.token_endpoint_auth_method = token_endpoint_auth_method;\n    }\n\n    return map;\n  }\n}\n\nexport class RegistrationHandler {\n  constructor(\n    public requestor: Requestor = new ExpoRequestor(),\n    public utils: QueryStringUtils = new BasicQueryStringUtils()\n  ) {}\n\n  protected isRegistrationResponse(\n    response: RegistrationResponseJson | RegistrationErrorJson\n  ): response is RegistrationResponseJson {\n    return (response as RegistrationErrorJson).error === undefined;\n  }\n\n  protected getHeaders(request: RegistrationRequest): StringMap {\n    const headers: StringMap = { 'Content-Type': 'application/x-www-form-urlencoded' };\n    // From the OAuth2 RFC, client ID and secret should be encoded prior to concatenation and\n    // conversion to Base64: https://tools.ietf.org/html/rfc6749#section-2.3.1\n    if (typeof request.initialAccessToken !== 'undefined') {\n      const encodedInitialAccessToken = encodeURIComponent(request.initialAccessToken);\n      headers.Authorization = `Bearer ${encodedInitialAccessToken}`;\n    }\n\n    return headers;\n  }\n\n  async performRegistrationRequest(\n    configuration: ExpoAuthorizationServiceConfiguration,\n    request: RegistrationRequest\n  ): Promise<RegistrationResponse> {\n    if (!configuration.registrationEndpoint) {\n      throw new RegistrationError({\n        error_description:\n          'The registration request could not be created because the registration URL is missing.',\n        error: 'invalid_request',\n      });\n    }\n    const response = await this.requestor.xhr<RegistrationResponseJson | RegistrationErrorJson>({\n      url: configuration.registrationEndpoint,\n      method: 'POST',\n      dataType: 'json', // adding implicit dataType\n      headers: this.getHeaders(request),\n      data: this.utils.stringify(request.toStringMap()),\n    });\n\n    if (this.isRegistrationResponse(response)) {\n      return new RegistrationResponse(response);\n    }\n\n    throw new AppAuthError(response.error, new RegistrationError(response));\n  }\n}\n"]}